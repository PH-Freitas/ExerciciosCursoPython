# -*- coding: utf-8 -*-
"""exercicios_aula_4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ihlwlrTN7mIktQrAKR2uVfDA5llsFPf

#Laços de Repetição

##1.Comando While
Comando **WHILE** é utilizado para criarmos laços de repetição no código.
Ou seja,<br>

### Como usar?
**Laço de repetição definido:**

---
```
i = 6
while i < 6:
    print(i)
```
---

**Laço de repetição indefinido:**

---
```
i = 0
while True:
    print('Estou preso')
    i +=1
    if i == 6:
        break
```
---

Caso não usar o break, o programa entrará em um looping infinito, ocupando espaço na memória até o programa travar.
"""

# Testar os códigos acima aqui.
i = 6
while i < 6:
    print(i)

i = 0
while True:
    print('Estou preso')
    i+=1
    if i == 6:
       break

"""###Exercícios

Faça um programa que peça verifica se o usuário digitou um número inteiro. <br>Caso tenha digitado, mostrar o número na tela.<br> Caso não tenha digitado, pedir para o usuário digitar novamente.
"""

while True:
   num = (input("Digite um numero:\n"))
   if num.isnumeric():
    print("Você Digitou {}.".format(num))
    break
   else:
    print("Entrada inválida")

"""Faça um programa de verificação de login e senha. O usuário pode errar a senha até 3 vezes antes do programa terminar informando que o acesso foi bloqueado."""

login = "Pedro"
senha = "123"
contador = 0

while True:
    contador += 1
    log = input("Digite o login\n")
    sen = input("Digite a senha\n")
    if log == login and sen == senha:
     print("Acesso liberado")
     break
    else:
     if contador <= 2:
       print("Login e/ou senha incorreta")
     else:
       print("Acesso Bloqueado")
       break

"""Desenvolva um gerador de tabuada, capaz de gerar a tabuada de qualquer número inteiro entre 1 a 10. O usuário deve informar de qual numero ele deseja ver a tabuada. A saída deve ser conforme o exemplo abaixo:<br>
Tabuada de 5:<br>
5 X 1 = 5<br>
5 X 2 = 10<br>
...<br>
5 X 10 = 50<br>
"""

num = int(input("digite um numero\n"))
contador = 0
print("Tabuada do {}".format(num))
while contador <= 9:
  contador += 1
  multiplicacao = num * contador
  print("{} * {} = {}".format(num,contador,multiplicacao))

"""Desenvolva uma calculadora de fatorial em que o usuário digita o número e o programa retorna seu fatorial. Exemplo de saída esperada: <br>
4! = 24<br>
<br> **Faça uma verificação se o usuário realmente digitou alguma coisa.**
"""

numero = input("Digite um numero para o cálculo de seu fatorial:\n")
fatorial = 1
if numero:
  num = int(numero)
  while num > 1:
      fatorial *= num
      num -= 1
  print("{}! = {}".format(numero,fatorial))
else:
  print("Digitou nada")

"""##2.Comando For
O comando **FOR** também é utilizado para fazer lógica de laços de repetição<br>


**Primeiro jeito de fazer for**

---
```
for contador in range(início, parada, incremento):
    print(contador)
```
---
"""

for contador in range(0,10,1):
  print(contador)

"""**Segundo jeito de fazer for**

---
```
lista = [1, 2, 3, 4]
for contador in lista:
    print(contador)
```
---
"""

lista = [1, 2, 3, 4]
for contador in lista:
  print(contador)

"""Considere a lista de itens vendidos por cada vendedor de uma loja.<br>
vendas = [100, 150, 1500, 2000, 120].

Caso o vendedor tenha vendido mais de 1000 unidades, ele ganhará 15% de bonus sobre seu salário.<br>
Faça um programa que informe quem conseguiu o bônus

"""

vendas = [100,150,1500,2000,120]
vendedores = ["João", "Carlos", "Gabriel", "Rafael", "Felipe"]
for bonus in vendas:
  if bonus < 1000:
     continue
  else:
    indice = vendas.index(bonus)
    print("O vendedor {} ganhará 15% de bônus no salário!".format(vendedores[indice]))

"""Crie um programa que apague todos os espaços de um texto.<br>"""

menssagem = input("Messagem:\n")
for letra in menssagem:
    if letra == " ":
      continue
    else:
      print(letra, end = "")